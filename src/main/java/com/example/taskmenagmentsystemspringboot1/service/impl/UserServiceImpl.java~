package com.example.taskmenagmentsystemspringboot1.service.impl;

import com.example.taskmenagmentsystemspringboot1.dtos.task.ViewTaskDto;
import com.example.taskmenagmentsystemspringboot1.dtos.user.*;
import com.example.taskmenagmentsystemspringboot1.entities.task.Task;
import com.example.taskmenagmentsystemspringboot1.entities.user.User;
import com.example.taskmenagmentsystemspringboot1.entities.user.UserRole;
import com.example.taskmenagmentsystemspringboot1.exceptions.EntityNotFoundException;
import com.example.taskmenagmentsystemspringboot1.exceptions.UsernameExistsException;
import com.example.taskmenagmentsystemspringboot1.mappers.TaskMapper;
import com.example.taskmenagmentsystemspringboot1.mappers.UserMapper;
import com.example.taskmenagmentsystemspringboot1.repositories.UserRepository;
import com.example.taskmenagmentsystemspringboot1.service.TaskService;
import com.example.taskmenagmentsystemspringboot1.service.UserService;
import lombok.RequiredArgsConstructor;
import org.springframework.security.authentication.BadCredentialsException;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.stereotype.Service;

import java.util.List;
import java.util.Optional;

@RequiredArgsConstructor
@Service
public class UserServiceImpl implements UserService {
    private final UserRepository userRepository;
    private final PasswordEncoder passwordEncoder;
    private final TaskService taskService;
    private final TaskMapper taskMapper;
    private  UserMapper userMapper;
     // Inject JwtUtil for token generation



    @Override
    public void registerManager(CreateUserDto createUserDto) {
        var exists = userRepository.findByUsername(createUserDto.getUsername());
        if (exists != null) {
            throw new UsernameExistsException("Username already exists");
        }

        var user = userMapper.fromCreateToUser(createUserDto);

        user.setPassword(passwordEncoder.encode(user.getPassword()));

        userRepository.save(user);
    }


    @Override
    public UserViewDto getUserById(Long id) {
        var exists = userRepository.findById(id);
        if (exists.isPresent()) {
            return userMapper.fromUserToView(exists.get());
        }
        return null;
    }

    @Override
    public List<UserViewDto> getAllUsersByRole(UserRole role) {
        return userMapper.fromEntityToViews(userRepository.findByRole(role));
    }

    @Override
    public UserViewDto findUserByUsername(String username) {
        var user = userRepository.findByUsername(username);
        if (user.isPresent()) {
            return userMapper.fromUserToView(user.get());
        }
        return null;
    }

    @Override
    public void createUser(CreateUserDto createUserDto) {
        var exists = userRepository.findByUsername(createUserDto.getUsername());
        if (exists != null) {
            throw new UsernameExistsException("Username already exists");
        }

        var user = userMapper.fromCreateToUser(createUserDto);

        user.setPassword(passwordEncoder.encode(user.getPassword()));

        userRepository.save(user);
    }

    @Override
    public List<UserViewDto> getAllManagers() {
        return userMapper.fromEntityToViews(userRepository.findByRole(UserRole.MANAGER));
    }

    @Override
    public UserProfileDto updateUser(UpdateUserDto userDto) {
        var exists = userRepository.findById(userDto.getId());
        if (exists.isPresent()) {
            var user = userMapper.fromUpdateToUser(userDto);
            user.setId(userDto.getId());
            return userMapper.fromUserToProfile(userRepository.save(user));
        }
        return null;
    }

    @Override
    public void deleteUser(Long id) {
        var exists = userRepository.findById(id);
        if (exists.isPresent()) {
            userRepository.deleteById(id);
        } else {
            throw new EntityNotFoundException("User not found with id: " + id);
        }
    }

    



}
