package com.example.taskmenagmentsystemspringboot1.service.impl;

import com.example.taskmenagmentsystemspringboot1.dtos.task.CreateTaskDto;
import com.example.taskmenagmentsystemspringboot1.dtos.task.UpdateTaskDto;
import com.example.taskmenagmentsystemspringboot1.dtos.task.ViewTaskDto;
import com.example.taskmenagmentsystemspringboot1.entities.task.Task;
import com.example.taskmenagmentsystemspringboot1.entities.task.TaskStatus;
import com.example.taskmenagmentsystemspringboot1.entities.user.User;
import com.example.taskmenagmentsystemspringboot1.mappers.TaskMapper;
import com.example.taskmenagmentsystemspringboot1.repositories.TaskRepository;
import com.example.taskmenagmentsystemspringboot1.repositories.UserRepository;
import com.example.taskmenagmentsystemspringboot1.service.TaskService;
import lombok.RequiredArgsConstructor;
import org.springframework.context.annotation.Bean;
import org.springframework.stereotype.Service;

import java.util.List;

@RequiredArgsConstructor
@Service
public class TaskServiceImpl implements TaskService {
    private final TaskRepository taskRepository;
    private final UserRepository userRepository;
    private TaskMapper taskMapper;
    @Override
    public Task createTask(CreateTaskDto createTaskDto) {
        return taskMapper.fromCreateToEntity(createTaskDto);
    }

    @Override
    public void deleteTask(Long id) {
        taskRepository.deleteById(id);
    }


    @Override
    public Task updateTask(Long id, UpdateTaskDto updateTaskDto) {
        var existingTask = taskRepository.findById(id);
        if (existingTask.isPresent()) {
            var task = taskMapper.fromUpdateToEntity(updateTaskDto);
            task.setId(id);
            return taskRepository.save(task);
        }
        return null;
    }

    @Override
    public ViewTaskDto getTask(Long id) {
        var task = taskRepository.findById(id).orElseThrow(() -> new RuntimeException("Task not found"));
        return taskMapper.fromEntityToView(task);
    }


    @Override
    public Task createTask(Task task) {
        return taskRepository.save(task);
    }

    @Override
    public List<Task> getTasksForCurrentUser(User user) {
        var existingUser = userRepository.findById(user.getId())
                .orElseThrow(() -> new RuntimeException("User not found"));
        return existingUser.getTasks().isEmpty() ? List.of() : existingUser.getTasks();
    }



    @Override
    public Task assignTaskToUser(User user, Task task) {
        Task task1 = taskRepository.findById(task.getId())
                .orElseThrow(() -> new RuntimeException("Task not found"));
        User user1 = userRepository.findById(user.getId())
                .orElseThrow(() -> new RuntimeException("User not found"));

        if (task1.getStatus() == TaskStatus.COMPLETED) {
            throw new RuntimeException("Cannot assign a completed task");
        }
        if (task1.getStatus() == TaskStatus.IN_PROGRESS) {
            throw new RuntimeException("Cannot assign an in-progress task to another user");
        }

        task1.setAssignedTo(user1);
        return taskRepository.save(task1);
    }




    public List<Task> getTasksByUserId(Long id) {
        return taskRepository.findAllByAssignedTo_Id(id);
    }

    public Task updateTaskStatus(Long taskId, TaskStatus newStatus) {
        Task task = taskRepository.findById(taskId)
                .orElseThrow(() -> new RuntimeException("Task not found"));

        // Example: Ensure task cannot transition from 'IN_PROGRESS' to 'PENDING'
        if (task.getStatus() == TaskStatus.IN_PROGRESS && newStatus == TaskStatus.PENDING) {
            throw new RuntimeException("Cannot change status from IN_PROGRESS to PENDING");
        }

        task.setStatus(newStatus);
        return taskRepository.save(task);
    }





}
